{"ast":null,"code":"import { PostsService } from './postsService';\nimport { shouldUseSupabase } from './supabase';\nexport class HybridPostsService {\n  // Check database health\n  static async checkDatabaseHealth() {\n    try {\n      if (shouldUseSupabase()) {\n        return await PostsService.checkDatabaseHealth();\n      } else {\n        return {\n          healthy: false,\n          error: 'Supabase not configured'\n        };\n      }\n    } catch (error) {\n      console.error('Database health check failed:', error);\n      return {\n        healthy: false,\n        error: `Health check failed: ${error}`\n      };\n    }\n  }\n\n  // Get all posts - try Supabase first, fallback to localStorage\n  static async getAllPosts() {\n    try {\n      if (shouldUseSupabase()) {\n        return await PostsService.getAllPosts();\n      } else {\n        return this.getPostsFromLocalStorage();\n      }\n    } catch (error) {\n      console.warn('Supabase failed, falling back to localStorage:', error);\n      return this.getPostsFromLocalStorage();\n    }\n  }\n\n  // Get posts by city\n  static async getPostsByCity(city) {\n    try {\n      if (shouldUseSupabase()) {\n        return await PostsService.getPostsByCity(city);\n      } else {\n        const allPosts = this.getPostsFromLocalStorage();\n        return allPosts.filter(post => post.location.startsWith(city + ',') || post.location === city);\n      }\n    } catch (error) {\n      console.warn('Supabase failed, falling back to localStorage:', error);\n      const allPosts = this.getPostsFromLocalStorage();\n      return allPosts.filter(post => post.location.startsWith(city + ',') || post.location === city);\n    }\n  }\n\n  // Get a single post by ID\n  static async getPostById(postId) {\n    try {\n      if (shouldUseSupabase()) {\n        return await PostsService.getPostById(postId);\n      } else {\n        const allPosts = this.getPostsFromLocalStorage();\n        return allPosts.find(post => post.id === postId) || null;\n      }\n    } catch (error) {\n      console.error('Failed to get post by ID:', error);\n      return null;\n    }\n  }\n\n  // Get a single comment by ID\n  static async getCommentById(commentId) {\n    try {\n      if (shouldUseSupabase()) {\n        return await PostsService.getCommentById(commentId);\n      } else {\n        const allPosts = this.getPostsFromLocalStorage();\n        for (const post of allPosts) {\n          const comment = post.comments.find(c => c.id === commentId);\n          if (comment) return comment;\n        }\n        return null;\n      }\n    } catch (error) {\n      console.error('Failed to get comment by ID:', error);\n      return null;\n    }\n  }\n\n  // Create a new post - Force Supabase usage for cross-device sync\n  static async createPost(profile) {\n    try {\n      if (shouldUseSupabase()) {\n        const newPost = await PostsService.createPost(profile);\n        return newPost;\n      } else {\n        // If Supabase is not configured, throw error instead of falling back to localStorage\n        throw new Error('Supabase is not configured. Please set up environment variables for cross-device sync.');\n      }\n    } catch (error) {\n      console.error('Failed to create post in Supabase:', error);\n      throw error; // Re-throw to let the UI handle the error\n    }\n  }\n\n  // Add a comment to a post - Force Supabase usage for cross-device sync\n  static async addComment(postId, comment) {\n    try {\n      if (shouldUseSupabase()) {\n        const newComment = await PostsService.addComment(postId, comment);\n        return newComment;\n      } else {\n        // If Supabase is not configured, throw error instead of falling back to localStorage\n        throw new Error('Supabase is not configured. Please set up environment variables for cross-device sync.');\n      }\n    } catch (error) {\n      console.error('Failed to add comment in Supabase:', error);\n      throw error; // Re-throw to let the UI handle the error\n    }\n  }\n\n  // Delete a post\n  static async deletePost(postId) {\n    try {\n      if (shouldUseSupabase()) {\n        await PostsService.deletePost(postId);\n        // Also remove from localStorage\n        this.deletePostFromLocalStorage(postId);\n      } else {\n        this.deletePostFromLocalStorage(postId);\n      }\n    } catch (error) {\n      console.warn('Supabase failed, falling back to localStorage:', error);\n      this.deletePostFromLocalStorage(postId);\n    }\n  }\n\n  // Update a post\n  static async updatePost(postId, updates) {\n    try {\n      if (shouldUseSupabase()) {\n        const updatedPost = await PostsService.updatePost(postId, updates);\n        // Also update localStorage\n        this.updatePostInLocalStorage(postId, updatedPost);\n        return updatedPost;\n      } else {\n        return this.updatePostInLocalStorage(postId, updates);\n      }\n    } catch (error) {\n      console.warn('Supabase failed, falling back to localStorage:', error);\n      return this.updatePostInLocalStorage(postId, updates);\n    }\n  }\n\n  // Seed initial data\n  static async seedInitialData(profiles) {\n    try {\n      if (shouldUseSupabase()) {\n        await PostsService.seedInitialData(profiles);\n        // Also save to localStorage as backup\n        this.saveProfilesToLocalStorage(profiles);\n      } else {\n        this.saveProfilesToLocalStorage(profiles);\n      }\n    } catch (error) {\n      console.warn('Supabase failed, falling back to localStorage:', error);\n      this.saveProfilesToLocalStorage(profiles);\n    }\n  }\n\n  // LocalStorage fallback methods\n  static getPostsFromLocalStorage() {\n    try {\n      const stored = localStorage.getItem('newspaperDatingProfiles');\n      if (stored) {\n        const parsed = JSON.parse(stored);\n        return parsed.map(profile => ({\n          ...profile,\n          createdAt: new Date(profile.createdAt),\n          comments: profile.comments.map(comment => ({\n            ...comment,\n            createdAt: new Date(comment.createdAt)\n          }))\n        }));\n      }\n    } catch (error) {\n      console.error('Error loading from localStorage:', error);\n    }\n    return [];\n  }\n  static saveProfilesToLocalStorage(profiles) {\n    try {\n      localStorage.setItem('newspaperDatingProfiles', JSON.stringify(profiles));\n      localStorage.setItem('newspaperDatingVersion', '2.0');\n    } catch (error) {\n      console.error('Error saving to localStorage:', error);\n    }\n  }\n  static deletePostFromLocalStorage(postId) {\n    try {\n      const profiles = this.getPostsFromLocalStorage();\n      const filteredProfiles = profiles.filter(p => p.id !== postId);\n      this.saveProfilesToLocalStorage(filteredProfiles);\n    } catch (error) {\n      console.error('Error deleting post from localStorage:', error);\n    }\n  }\n  static updatePostInLocalStorage(postId, updates) {\n    const profiles = this.getPostsFromLocalStorage();\n    const profileIndex = profiles.findIndex(p => p.id === postId);\n    if (profileIndex >= 0) {\n      profiles[profileIndex] = {\n        ...profiles[profileIndex],\n        ...updates\n      };\n      this.saveProfilesToLocalStorage(profiles);\n      return profiles[profileIndex];\n    }\n    throw new Error('Post not found');\n  }\n}","map":{"version":3,"names":["PostsService","shouldUseSupabase","HybridPostsService","checkDatabaseHealth","healthy","error","console","getAllPosts","getPostsFromLocalStorage","warn","getPostsByCity","city","allPosts","filter","post","location","startsWith","getPostById","postId","find","id","getCommentById","commentId","comment","comments","c","createPost","profile","newPost","Error","addComment","newComment","deletePost","deletePostFromLocalStorage","updatePost","updates","updatedPost","updatePostInLocalStorage","seedInitialData","profiles","saveProfilesToLocalStorage","stored","localStorage","getItem","parsed","JSON","parse","map","createdAt","Date","setItem","stringify","filteredProfiles","p","profileIndex","findIndex"],"sources":["/Users/mrunal/Downloads/Newspaper Dating App/src/services/hybridPostsService.ts"],"sourcesContent":["import { PostsService } from './postsService';\nimport { shouldUseSupabase } from './supabase';\nimport { Profile, Comment } from '../types';\n\nexport class HybridPostsService {\n  // Check database health\n  static async checkDatabaseHealth(): Promise<{ healthy: boolean; error?: string; tables?: string[] }> {\n    try {\n      if (shouldUseSupabase()) {\n        return await PostsService.checkDatabaseHealth();\n      } else {\n        return { healthy: false, error: 'Supabase not configured' };\n      }\n    } catch (error) {\n      console.error('Database health check failed:', error);\n      return { healthy: false, error: `Health check failed: ${error}` };\n    }\n  }\n\n  // Get all posts - try Supabase first, fallback to localStorage\n  static async getAllPosts(): Promise<Profile[]> {\n    try {\n      if (shouldUseSupabase()) {\n        return await PostsService.getAllPosts();\n      } else {\n        return this.getPostsFromLocalStorage();\n      }\n    } catch (error) {\n      console.warn('Supabase failed, falling back to localStorage:', error);\n      return this.getPostsFromLocalStorage();\n    }\n  }\n\n  // Get posts by city\n  static async getPostsByCity(city: string): Promise<Profile[]> {\n    try {\n      if (shouldUseSupabase()) {\n        return await PostsService.getPostsByCity(city);\n      } else {\n        const allPosts = this.getPostsFromLocalStorage();\n        return allPosts.filter(post => \n          post.location.startsWith(city + ',') || \n          post.location === city\n        );\n      }\n    } catch (error) {\n      console.warn('Supabase failed, falling back to localStorage:', error);\n      const allPosts = this.getPostsFromLocalStorage();\n      return allPosts.filter(post => \n        post.location.startsWith(city + ',') || \n        post.location === city\n      );\n    }\n  }\n\n  // Get a single post by ID\n  static async getPostById(postId: string): Promise<Profile | null> {\n    try {\n      if (shouldUseSupabase()) {\n        return await PostsService.getPostById(postId);\n      } else {\n        const allPosts = this.getPostsFromLocalStorage();\n        return allPosts.find(post => post.id === postId) || null;\n      }\n    } catch (error) {\n      console.error('Failed to get post by ID:', error);\n      return null;\n    }\n  }\n\n  // Get a single comment by ID\n  static async getCommentById(commentId: string): Promise<Comment | null> {\n    try {\n      if (shouldUseSupabase()) {\n        return await PostsService.getCommentById(commentId);\n      } else {\n        const allPosts = this.getPostsFromLocalStorage();\n        for (const post of allPosts) {\n          const comment = post.comments.find(c => c.id === commentId);\n          if (comment) return comment;\n        }\n        return null;\n      }\n    } catch (error) {\n      console.error('Failed to get comment by ID:', error);\n      return null;\n    }\n  }\n\n  // Create a new post - Force Supabase usage for cross-device sync\n  static async createPost(profile: Omit<Profile, 'id' | 'createdAt'>): Promise<Profile> {\n    try {\n      if (shouldUseSupabase()) {\n        const newPost = await PostsService.createPost(profile);\n        return newPost;\n      } else {\n        // If Supabase is not configured, throw error instead of falling back to localStorage\n        throw new Error('Supabase is not configured. Please set up environment variables for cross-device sync.');\n      }\n    } catch (error) {\n      console.error('Failed to create post in Supabase:', error);\n      throw error; // Re-throw to let the UI handle the error\n    }\n  }\n\n  // Add a comment to a post - Force Supabase usage for cross-device sync\n  static async addComment(postId: string, comment: Omit<Comment, 'id' | 'createdAt'>): Promise<Comment> {\n    try {\n      if (shouldUseSupabase()) {\n        const newComment = await PostsService.addComment(postId, comment);\n        return newComment;\n      } else {\n        // If Supabase is not configured, throw error instead of falling back to localStorage\n        throw new Error('Supabase is not configured. Please set up environment variables for cross-device sync.');\n      }\n    } catch (error) {\n      console.error('Failed to add comment in Supabase:', error);\n      throw error; // Re-throw to let the UI handle the error\n    }\n  }\n\n  // Delete a post\n  static async deletePost(postId: string): Promise<void> {\n    try {\n      if (shouldUseSupabase()) {\n        await PostsService.deletePost(postId);\n        // Also remove from localStorage\n        this.deletePostFromLocalStorage(postId);\n      } else {\n        this.deletePostFromLocalStorage(postId);\n      }\n    } catch (error) {\n      console.warn('Supabase failed, falling back to localStorage:', error);\n      this.deletePostFromLocalStorage(postId);\n    }\n  }\n\n  // Update a post\n  static async updatePost(postId: string, updates: Partial<Profile>): Promise<Profile> {\n    try {\n      if (shouldUseSupabase()) {\n        const updatedPost = await PostsService.updatePost(postId, updates);\n        // Also update localStorage\n        this.updatePostInLocalStorage(postId, updatedPost);\n        return updatedPost;\n      } else {\n        return this.updatePostInLocalStorage(postId, updates);\n      }\n    } catch (error) {\n      console.warn('Supabase failed, falling back to localStorage:', error);\n      return this.updatePostInLocalStorage(postId, updates);\n    }\n  }\n\n  // Seed initial data\n  static async seedInitialData(profiles: Profile[]): Promise<void> {\n    try {\n      if (shouldUseSupabase()) {\n        await PostsService.seedInitialData(profiles);\n        // Also save to localStorage as backup\n        this.saveProfilesToLocalStorage(profiles);\n      } else {\n        this.saveProfilesToLocalStorage(profiles);\n      }\n    } catch (error) {\n      console.warn('Supabase failed, falling back to localStorage:', error);\n      this.saveProfilesToLocalStorage(profiles);\n    }\n  }\n\n  // LocalStorage fallback methods\n  private static getPostsFromLocalStorage(): Profile[] {\n    try {\n      const stored = localStorage.getItem('newspaperDatingProfiles');\n      if (stored) {\n        const parsed = JSON.parse(stored);\n        return parsed.map((profile: any) => ({\n          ...profile,\n          createdAt: new Date(profile.createdAt),\n          comments: profile.comments.map((comment: any) => ({\n            ...comment,\n            createdAt: new Date(comment.createdAt)\n          }))\n        }));\n      }\n    } catch (error) {\n      console.error('Error loading from localStorage:', error);\n    }\n    return [];\n  }\n\n  private static saveProfilesToLocalStorage(profiles: Profile[]): void {\n    try {\n      localStorage.setItem('newspaperDatingProfiles', JSON.stringify(profiles));\n      localStorage.setItem('newspaperDatingVersion', '2.0');\n    } catch (error) {\n      console.error('Error saving to localStorage:', error);\n    }\n  }\n\n\n\n\n\n  private static deletePostFromLocalStorage(postId: string): void {\n    try {\n      const profiles = this.getPostsFromLocalStorage();\n      const filteredProfiles = profiles.filter(p => p.id !== postId);\n      this.saveProfilesToLocalStorage(filteredProfiles);\n    } catch (error) {\n      console.error('Error deleting post from localStorage:', error);\n    }\n  }\n\n  private static updatePostInLocalStorage(postId: string, updates: Partial<Profile>): Profile {\n    const profiles = this.getPostsFromLocalStorage();\n    const profileIndex = profiles.findIndex(p => p.id === postId);\n    if (profileIndex >= 0) {\n      profiles[profileIndex] = { ...profiles[profileIndex], ...updates };\n      this.saveProfilesToLocalStorage(profiles);\n      return profiles[profileIndex];\n    }\n    throw new Error('Post not found');\n  }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}