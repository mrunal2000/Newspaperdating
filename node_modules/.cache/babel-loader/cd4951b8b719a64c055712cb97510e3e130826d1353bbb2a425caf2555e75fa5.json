{"ast":null,"code":"import{supabase,convertDatabasePostToProfile,convertProfileToDatabasePost}from'./supabase';export class PostsService{// Get all posts with their comments\nstatic async getAllPosts(){try{// Get all posts\nconst{data:posts,error:postsError}=await supabase.from('posts').select('*').order('created_at',{ascending:false});if(postsError)throw postsError;if(!posts)return[];// Get all comments for all posts\nconst{data:comments,error:commentsError}=await supabase.from('comments').select('*').order('created_at',{ascending:true});if(commentsError)throw commentsError;// Group comments by post_id\nconst commentsByPostId=(comments||[]).reduce((acc,comment)=>{if(!acc[comment.post_id]){acc[comment.post_id]=[];}acc[comment.post_id].push(comment);return acc;},{});// Convert database posts to app profiles\nreturn posts.map(post=>convertDatabasePostToProfile(post,commentsByPostId[post.id]||[]));}catch(error){console.error('Error fetching posts:',error);throw error;}}// Get posts by city\nstatic async getPostsByCity(city){try{const allPosts=await this.getAllPosts();return allPosts.filter(post=>post.location.startsWith(city+',')||post.location===city);}catch(error){console.error('Error fetching posts by city:',error);throw error;}}// Create a new post\nstatic async createPost(profile){try{const postData=convertProfileToDatabasePost(profile);const{data:newPost,error}=await supabase.from('posts').insert([postData]).select().single();if(error)throw error;// Convert back to Profile type\nreturn convertDatabasePostToProfile(newPost,[]);}catch(error){console.error('Error creating post:',error);throw error;}}// Add a comment to a post\nstatic async addComment(postId,comment){try{const{data:newComment,error}=await supabase.from('comments').insert([{post_id:postId,text:comment.text,author:comment.author}]).select().single();if(error)throw error;return{id:newComment.id,text:newComment.text,author:newComment.author,createdAt:new Date(newComment.created_at)};}catch(error){console.error('Error adding comment:',error);throw error;}}// Delete a post\nstatic async deletePost(postId){try{// First delete all comments for this post\nconst{error:commentsError}=await supabase.from('comments').delete().eq('post_id',postId);if(commentsError)throw commentsError;// Then delete the post\nconst{error:postError}=await supabase.from('posts').delete().eq('id',postId);if(postError)throw postError;}catch(error){console.error('Error deleting post:',error);throw error;}}// Update a post\nstatic async updatePost(postId,updates){try{const updateData=convertProfileToDatabasePost(updates);const{data:updatedPost,error}=await supabase.from('posts').update(updateData).eq('id',postId).select().single();if(error)throw error;// Get comments for this post\nconst{data:comments,error:commentsError}=await supabase.from('comments').select('*').eq('post_id',postId).order('created_at',{ascending:true});if(commentsError)throw commentsError;return convertDatabasePostToProfile(updatedPost,comments||[]);}catch(error){console.error('Error updating post:',error);throw error;}}// Seed initial data (for development/testing)\nstatic async seedInitialData(profiles){try{// Clear existing data\nawait supabase.from('comments').delete().neq('id','00000000-0000-0000-0000-000000000000');await supabase.from('posts').delete().neq('id','00000000-0000-0000-0000-000000000000');// Insert new profiles\nfor(const profile of profiles){await this.createPost(profile);}}catch(error){console.error('Error seeding initial data:',error);throw error;}}}","map":{"version":3,"names":["supabase","convertDatabasePostToProfile","convertProfileToDatabasePost","PostsService","getAllPosts","data","posts","error","postsError","from","select","order","ascending","comments","commentsError","commentsByPostId","reduce","acc","comment","post_id","push","map","post","id","console","getPostsByCity","city","allPosts","filter","location","startsWith","createPost","profile","postData","newPost","insert","single","addComment","postId","newComment","text","author","createdAt","Date","created_at","deletePost","delete","eq","postError","updatePost","updates","updateData","updatedPost","update","seedInitialData","profiles","neq"],"sources":["/Users/mrunal/Downloads/Newspaper Dating App/src/services/postsService.ts"],"sourcesContent":["import { supabase, convertDatabasePostToProfile, convertProfileToDatabasePost, DatabaseComment } from './supabase';\nimport { Profile, Comment } from '../types';\n\nexport class PostsService {\n  // Get all posts with their comments\n  static async getAllPosts(): Promise<Profile[]> {\n    try {\n      // Get all posts\n      const { data: posts, error: postsError } = await supabase\n        .from('posts')\n        .select('*')\n        .order('created_at', { ascending: false });\n\n      if (postsError) throw postsError;\n\n      if (!posts) return [];\n\n      // Get all comments for all posts\n      const { data: comments, error: commentsError } = await supabase\n        .from('comments')\n        .select('*')\n        .order('created_at', { ascending: true });\n\n      if (commentsError) throw commentsError;\n\n      // Group comments by post_id\n      const commentsByPostId = (comments || []).reduce((acc, comment) => {\n        if (!acc[comment.post_id]) {\n          acc[comment.post_id] = [];\n        }\n        acc[comment.post_id].push(comment);\n        return acc;\n      }, {} as Record<string, DatabaseComment[]>);\n\n      // Convert database posts to app profiles\n      return posts.map(post => \n        convertDatabasePostToProfile(post, commentsByPostId[post.id] || [])\n      );\n    } catch (error) {\n      console.error('Error fetching posts:', error);\n      throw error;\n    }\n  }\n\n  // Get posts by city\n  static async getPostsByCity(city: string): Promise<Profile[]> {\n    try {\n      const allPosts = await this.getAllPosts();\n      return allPosts.filter(post => \n        post.location.startsWith(city + ',') || \n        post.location === city\n      );\n    } catch (error) {\n      console.error('Error fetching posts by city:', error);\n      throw error;\n    }\n  }\n\n  // Create a new post\n  static async createPost(profile: Omit<Profile, 'id' | 'createdAt'>): Promise<Profile> {\n    try {\n      const postData = convertProfileToDatabasePost(profile);\n      \n      const { data: newPost, error } = await supabase\n        .from('posts')\n        .insert([postData])\n        .select()\n        .single();\n\n      if (error) throw error;\n\n      // Convert back to Profile type\n      return convertDatabasePostToProfile(newPost, []);\n    } catch (error) {\n      console.error('Error creating post:', error);\n      throw error;\n    }\n  }\n\n  // Add a comment to a post\n  static async addComment(postId: string, comment: Omit<Comment, 'id' | 'createdAt'>): Promise<Comment> {\n    try {\n      const { data: newComment, error } = await supabase\n        .from('comments')\n        .insert([{\n          post_id: postId,\n          text: comment.text,\n          author: comment.author\n        }])\n        .select()\n        .single();\n\n      if (error) throw error;\n\n      return {\n        id: newComment.id,\n        text: newComment.text,\n        author: newComment.author,\n        createdAt: new Date(newComment.created_at)\n      };\n    } catch (error) {\n      console.error('Error adding comment:', error);\n      throw error;\n    }\n  }\n\n  // Delete a post\n  static async deletePost(postId: string): Promise<void> {\n    try {\n      // First delete all comments for this post\n      const { error: commentsError } = await supabase\n        .from('comments')\n        .delete()\n        .eq('post_id', postId);\n\n      if (commentsError) throw commentsError;\n\n      // Then delete the post\n      const { error: postError } = await supabase\n        .from('posts')\n        .delete()\n        .eq('id', postId);\n\n      if (postError) throw postError;\n    } catch (error) {\n      console.error('Error deleting post:', error);\n      throw error;\n    }\n  }\n\n  // Update a post\n  static async updatePost(postId: string, updates: Partial<Profile>): Promise<Profile> {\n    try {\n      const updateData = convertProfileToDatabasePost(updates);\n      \n      const { data: updatedPost, error } = await supabase\n        .from('posts')\n        .update(updateData)\n        .eq('id', postId)\n        .select()\n        .single();\n\n      if (error) throw error;\n\n      // Get comments for this post\n      const { data: comments, error: commentsError } = await supabase\n        .from('comments')\n        .select('*')\n        .eq('post_id', postId)\n        .order('created_at', { ascending: true });\n\n      if (commentsError) throw commentsError;\n\n      return convertDatabasePostToProfile(updatedPost, comments || []);\n    } catch (error) {\n      console.error('Error updating post:', error);\n      throw error;\n    }\n  }\n\n  // Seed initial data (for development/testing)\n  static async seedInitialData(profiles: Profile[]): Promise<void> {\n    try {\n      // Clear existing data\n      await supabase.from('comments').delete().neq('id', '00000000-0000-0000-0000-000000000000');\n      await supabase.from('posts').delete().neq('id', '00000000-0000-0000-0000-000000000000');\n\n      // Insert new profiles\n      for (const profile of profiles) {\n        await this.createPost(profile);\n      }\n    } catch (error) {\n      console.error('Error seeding initial data:', error);\n      throw error;\n    }\n  }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}