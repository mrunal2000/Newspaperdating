{"ast":null,"code":"import { PostsService } from './postsService';\nimport { shouldUseSupabase } from './supabase';\nexport class HybridPostsService {\n  // Check database health\n  static async checkDatabaseHealth() {\n    try {\n      if (shouldUseSupabase()) {\n        return await PostsService.checkDatabaseHealth();\n      } else {\n        return {\n          healthy: false,\n          error: 'Supabase not configured'\n        };\n      }\n    } catch (error) {\n      console.error('Database health check failed:', error);\n      return {\n        healthy: false,\n        error: `Health check failed: ${error}`\n      };\n    }\n  }\n\n  // Get all posts - try Supabase first, fallback to localStorage\n  static async getAllPosts() {\n    try {\n      if (shouldUseSupabase()) {\n        return await PostsService.getAllPosts();\n      } else {\n        return this.getPostsFromLocalStorage();\n      }\n    } catch (error) {\n      console.warn('Supabase failed, falling back to localStorage:', error);\n      return this.getPostsFromLocalStorage();\n    }\n  }\n\n  // Get posts by city\n  static async getPostsByCity(city) {\n    try {\n      if (shouldUseSupabase()) {\n        return await PostsService.getPostsByCity(city);\n      } else {\n        const allPosts = this.getPostsFromLocalStorage();\n        return allPosts.filter(post => post.location.startsWith(city + ',') || post.location === city);\n      }\n    } catch (error) {\n      console.warn('Supabase failed, falling back to localStorage:', error);\n      const allPosts = this.getPostsFromLocalStorage();\n      return allPosts.filter(post => post.location.startsWith(city + ',') || post.location === city);\n    }\n  }\n\n  // Get a single post by ID\n  static async getPostById(postId) {\n    try {\n      if (shouldUseSupabase()) {\n        return await PostsService.getPostById(postId);\n      } else {\n        const allPosts = this.getPostsFromLocalStorage();\n        return allPosts.find(post => post.id === postId) || null;\n      }\n    } catch (error) {\n      console.error('Failed to get post by ID:', error);\n      return null;\n    }\n  }\n\n  // Get a single comment by ID\n  static async getCommentById(commentId) {\n    try {\n      if (shouldUseSupabase()) {\n        return await PostsService.getCommentById(commentId);\n      } else {\n        const allPosts = this.getPostsFromLocalStorage();\n        for (const post of allPosts) {\n          const comment = post.comments.find(c => c.id === commentId);\n          if (comment) return comment;\n        }\n        return null;\n      }\n    } catch (error) {\n      console.error('Failed to get comment by ID:', error);\n      return null;\n    }\n  }\n\n  // Create a new post - Force Supabase usage for cross-device sync\n  static async createPost(profile) {\n    console.log('🔍 createPost called with profile:', profile);\n    console.log('🔍 shouldUseSupabase():', shouldUseSupabase());\n    try {\n      if (shouldUseSupabase()) {\n        console.log('🔍 Using Supabase for post creation');\n        // Generate a proper UUID for Supabase\n        const newId = crypto.randomUUID();\n        const profileWithId = {\n          ...profile,\n          id: newId,\n          createdAt: new Date(),\n          likes: 0\n        };\n        const newPost = await PostsService.createPost(profileWithId);\n        console.log('🔍 Post created successfully in Supabase:', newPost);\n        return newPost;\n      } else {\n        // Fallback to localStorage if Supabase is not configured\n        console.warn('🔍 Supabase not configured, using localStorage fallback');\n        const newId = `user-${Date.now()}-${Math.random().toString(36).substr(2, 9)}`;\n        const newPost = {\n          ...profile,\n          id: newId,\n          createdAt: new Date(),\n          likes: 0\n        };\n        this.saveProfilesToLocalStorage([...this.getPostsFromLocalStorage(), newPost]);\n        console.log('🔍 Post created successfully in localStorage:', newPost);\n        return newPost;\n      }\n    } catch (error) {\n      console.error('🔍 Error in createPost:', error);\n      // Fallback to localStorage on error\n      console.warn('🔍 Supabase failed, falling back to localStorage');\n      const newId = `user-${Date.now()}-${Math.random().toString(36).substr(2, 9)}`;\n      const newPost = {\n        ...profile,\n        id: newId,\n        createdAt: new Date(),\n        likes: 0\n      };\n      this.saveProfilesToLocalStorage([...this.getPostsFromLocalStorage(), newPost]);\n      console.log('🔍 Post created successfully in localStorage fallback:', newPost);\n      return newPost;\n    }\n  }\n\n  // Add a comment to a post - Force Supabase usage for cross-device sync\n  static async addComment(postId, comment) {\n    try {\n      if (shouldUseSupabase()) {\n        const newComment = await PostsService.addComment(postId, comment);\n        return newComment;\n      } else {\n        // Fallback to localStorage if Supabase is not configured\n        console.warn('Supabase not configured, using localStorage fallback');\n        const newComment = {\n          ...comment,\n          id: Date.now().toString(),\n          createdAt: new Date()\n        };\n        // Update the post in localStorage with the new comment\n        const profiles = this.getPostsFromLocalStorage();\n        const profileIndex = profiles.findIndex(p => p.id === postId);\n        if (profileIndex >= 0) {\n          profiles[profileIndex].comments.push(newComment);\n          this.saveProfilesToLocalStorage(profiles);\n        }\n        return newComment;\n      }\n    } catch (error) {\n      console.error('Failed to add comment in Supabase:', error);\n      // Fallback to localStorage on error\n      console.warn('Supabase failed, falling back to localStorage');\n      const newComment = {\n        ...comment,\n        id: Date.now().toString(),\n        createdAt: new Date()\n      };\n      // Update the post in localStorage with the new comment\n      const profiles = this.getPostsFromLocalStorage();\n      const profileIndex = profiles.findIndex(p => p.id === postId);\n      if (profileIndex >= 0) {\n        profiles[profileIndex].comments.push(newComment);\n        this.saveProfilesToLocalStorage(profiles);\n      }\n      return newComment;\n    }\n  }\n\n  // Delete a post\n  static async deletePost(postId) {\n    try {\n      if (shouldUseSupabase()) {\n        await PostsService.deletePost(postId);\n        // Also remove from localStorage\n        this.deletePostFromLocalStorage(postId);\n      } else {\n        this.deletePostFromLocalStorage(postId);\n      }\n    } catch (error) {\n      console.warn('Supabase failed, falling back to localStorage:', error);\n      this.deletePostFromLocalStorage(postId);\n    }\n  }\n\n  // Update a post\n  static async updatePost(postId, updates) {\n    try {\n      if (shouldUseSupabase()) {\n        const updatedPost = await PostsService.updatePost(postId, updates);\n        // Also update localStorage\n        this.updatePostInLocalStorage(postId, updatedPost);\n        return updatedPost;\n      } else {\n        return this.updatePostInLocalStorage(postId, updates);\n      }\n    } catch (error) {\n      console.warn('Supabase failed, falling back to localStorage:', error);\n      return this.updatePostInLocalStorage(postId, updates);\n    }\n  }\n\n  // Seed initial data\n  static async seedInitialData(profiles) {\n    try {\n      if (shouldUseSupabase()) {\n        await PostsService.seedInitialData(profiles);\n        // Also save to localStorage as backup\n        this.saveProfilesToLocalStorage(profiles);\n      } else {\n        this.saveProfilesToLocalStorage(profiles);\n      }\n    } catch (error) {\n      console.warn('Supabase failed, falling back to localStorage:', error);\n      this.saveProfilesToLocalStorage(profiles);\n    }\n  }\n\n  // LocalStorage fallback methods\n  static getPostsFromLocalStorage() {\n    try {\n      const stored = localStorage.getItem('newspaperDatingProfiles');\n      if (stored) {\n        const parsed = JSON.parse(stored);\n        return parsed.map(profile => ({\n          ...profile,\n          likes: profile.likes || 0,\n          // Ensure likes field exists\n          createdAt: new Date(profile.createdAt),\n          comments: profile.comments.map(comment => ({\n            ...comment,\n            createdAt: new Date(comment.createdAt)\n          }))\n        }));\n      }\n    } catch (error) {\n      console.error('Error loading from localStorage:', error);\n    }\n    return [];\n  }\n  static saveProfilesToLocalStorage(profiles) {\n    try {\n      localStorage.setItem('newspaperDatingProfiles', JSON.stringify(profiles));\n      localStorage.setItem('newspaperDatingVersion', '2.4'); // Updated version for likes field\n    } catch (error) {\n      console.error('Error saving to localStorage:', error);\n    }\n  }\n  static deletePostFromLocalStorage(postId) {\n    try {\n      const profiles = this.getPostsFromLocalStorage();\n      const filteredProfiles = profiles.filter(p => p.id !== postId);\n      this.saveProfilesToLocalStorage(filteredProfiles);\n    } catch (error) {\n      console.error('Error deleting post from localStorage:', error);\n    }\n  }\n  static updatePostInLocalStorage(postId, updates) {\n    const profiles = this.getPostsFromLocalStorage();\n    const profileIndex = profiles.findIndex(p => p.id === postId);\n    if (profileIndex >= 0) {\n      profiles[profileIndex] = {\n        ...profiles[profileIndex],\n        ...updates\n      };\n      this.saveProfilesToLocalStorage(profiles);\n      return profiles[profileIndex];\n    }\n    throw new Error('Post not found');\n  }\n}","map":{"version":3,"names":["PostsService","shouldUseSupabase","HybridPostsService","checkDatabaseHealth","healthy","error","console","getAllPosts","getPostsFromLocalStorage","warn","getPostsByCity","city","allPosts","filter","post","location","startsWith","getPostById","postId","find","id","getCommentById","commentId","comment","comments","c","createPost","profile","log","newId","crypto","randomUUID","profileWithId","createdAt","Date","likes","newPost","now","Math","random","toString","substr","saveProfilesToLocalStorage","addComment","newComment","profiles","profileIndex","findIndex","p","push","deletePost","deletePostFromLocalStorage","updatePost","updates","updatedPost","updatePostInLocalStorage","seedInitialData","stored","localStorage","getItem","parsed","JSON","parse","map","setItem","stringify","filteredProfiles","Error"],"sources":["/Users/mrunal/Downloads/Newspaper Dating App/src/services/hybridPostsService.ts"],"sourcesContent":["import { PostsService } from './postsService';\nimport { shouldUseSupabase } from './supabase';\nimport { Profile, Comment } from '../types';\n\nexport class HybridPostsService {\n  // Check database health\n  static async checkDatabaseHealth(): Promise<{ healthy: boolean; error?: string; tables?: string[] }> {\n    try {\n      if (shouldUseSupabase()) {\n        return await PostsService.checkDatabaseHealth();\n      } else {\n        return { healthy: false, error: 'Supabase not configured' };\n      }\n    } catch (error) {\n      console.error('Database health check failed:', error);\n      return { healthy: false, error: `Health check failed: ${error}` };\n    }\n  }\n\n  // Get all posts - try Supabase first, fallback to localStorage\n  static async getAllPosts(): Promise<Profile[]> {\n    try {\n      if (shouldUseSupabase()) {\n        return await PostsService.getAllPosts();\n      } else {\n        return this.getPostsFromLocalStorage();\n      }\n    } catch (error) {\n      console.warn('Supabase failed, falling back to localStorage:', error);\n      return this.getPostsFromLocalStorage();\n    }\n  }\n\n  // Get posts by city\n  static async getPostsByCity(city: string): Promise<Profile[]> {\n    try {\n      if (shouldUseSupabase()) {\n        return await PostsService.getPostsByCity(city);\n      } else {\n        const allPosts = this.getPostsFromLocalStorage();\n        return allPosts.filter(post => \n          post.location.startsWith(city + ',') || \n          post.location === city\n        );\n      }\n    } catch (error) {\n      console.warn('Supabase failed, falling back to localStorage:', error);\n      const allPosts = this.getPostsFromLocalStorage();\n      return allPosts.filter(post => \n        post.location.startsWith(city + ',') || \n        post.location === city\n      );\n    }\n  }\n\n  // Get a single post by ID\n  static async getPostById(postId: string): Promise<Profile | null> {\n    try {\n      if (shouldUseSupabase()) {\n        return await PostsService.getPostById(postId);\n      } else {\n        const allPosts = this.getPostsFromLocalStorage();\n        return allPosts.find(post => post.id === postId) || null;\n      }\n    } catch (error) {\n      console.error('Failed to get post by ID:', error);\n      return null;\n    }\n  }\n\n  // Get a single comment by ID\n  static async getCommentById(commentId: string): Promise<Comment | null> {\n    try {\n      if (shouldUseSupabase()) {\n        return await PostsService.getCommentById(commentId);\n      } else {\n        const allPosts = this.getPostsFromLocalStorage();\n        for (const post of allPosts) {\n          const comment = post.comments.find(c => c.id === commentId);\n          if (comment) return comment;\n        }\n        return null;\n      }\n    } catch (error) {\n      console.error('Failed to get comment by ID:', error);\n      return null;\n    }\n  }\n\n  // Create a new post - Force Supabase usage for cross-device sync\n  static async createPost(profile: Omit<Profile, 'id' | 'createdAt'>): Promise<Profile> {\n    console.log('🔍 createPost called with profile:', profile);\n    console.log('🔍 shouldUseSupabase():', shouldUseSupabase());\n    \n    try {\n      if (shouldUseSupabase()) {\n        console.log('🔍 Using Supabase for post creation');\n        // Generate a proper UUID for Supabase\n        const newId = crypto.randomUUID();\n        const profileWithId = { ...profile, id: newId, createdAt: new Date(), likes: 0 };\n        const newPost = await PostsService.createPost(profileWithId);\n        console.log('🔍 Post created successfully in Supabase:', newPost);\n        return newPost;\n      } else {\n        // Fallback to localStorage if Supabase is not configured\n        console.warn('🔍 Supabase not configured, using localStorage fallback');\n        const newId = `user-${Date.now()}-${Math.random().toString(36).substr(2, 9)}`;\n        const newPost: Profile = {\n          ...profile,\n          id: newId,\n          createdAt: new Date(),\n          likes: 0\n        };\n        this.saveProfilesToLocalStorage([...this.getPostsFromLocalStorage(), newPost]);\n        console.log('🔍 Post created successfully in localStorage:', newPost);\n        return newPost;\n      }\n    } catch (error) {\n      console.error('🔍 Error in createPost:', error);\n      // Fallback to localStorage on error\n      console.warn('🔍 Supabase failed, falling back to localStorage');\n      const newId = `user-${Date.now()}-${Math.random().toString(36).substr(2, 9)}`;\n      const newPost: Profile = {\n        ...profile,\n        id: newId,\n        createdAt: new Date(),\n        likes: 0\n      };\n      this.saveProfilesToLocalStorage([...this.getPostsFromLocalStorage(), newPost]);\n      console.log('🔍 Post created successfully in localStorage fallback:', newPost);\n      return newPost;\n    }\n  }\n\n  // Add a comment to a post - Force Supabase usage for cross-device sync\n  static async addComment(postId: string, comment: Omit<Comment, 'id' | 'createdAt'>): Promise<Comment> {\n    try {\n      if (shouldUseSupabase()) {\n        const newComment = await PostsService.addComment(postId, comment);\n        return newComment;\n      } else {\n        // Fallback to localStorage if Supabase is not configured\n        console.warn('Supabase not configured, using localStorage fallback');\n        const newComment: Comment = {\n          ...comment,\n          id: Date.now().toString(),\n          createdAt: new Date()\n        };\n        // Update the post in localStorage with the new comment\n        const profiles = this.getPostsFromLocalStorage();\n        const profileIndex = profiles.findIndex(p => p.id === postId);\n        if (profileIndex >= 0) {\n          profiles[profileIndex].comments.push(newComment);\n          this.saveProfilesToLocalStorage(profiles);\n        }\n        return newComment;\n      }\n    } catch (error) {\n      console.error('Failed to add comment in Supabase:', error);\n      // Fallback to localStorage on error\n      console.warn('Supabase failed, falling back to localStorage');\n      const newComment: Comment = {\n        ...comment,\n        id: Date.now().toString(),\n        createdAt: new Date()\n      };\n      // Update the post in localStorage with the new comment\n      const profiles = this.getPostsFromLocalStorage();\n      const profileIndex = profiles.findIndex(p => p.id === postId);\n      if (profileIndex >= 0) {\n        profiles[profileIndex].comments.push(newComment);\n        this.saveProfilesToLocalStorage(profiles);\n      }\n      return newComment;\n    }\n  }\n\n  // Delete a post\n  static async deletePost(postId: string): Promise<void> {\n    try {\n      if (shouldUseSupabase()) {\n        await PostsService.deletePost(postId);\n        // Also remove from localStorage\n        this.deletePostFromLocalStorage(postId);\n      } else {\n        this.deletePostFromLocalStorage(postId);\n      }\n    } catch (error) {\n      console.warn('Supabase failed, falling back to localStorage:', error);\n      this.deletePostFromLocalStorage(postId);\n    }\n  }\n\n  // Update a post\n  static async updatePost(postId: string, updates: Partial<Profile>): Promise<Profile> {\n    try {\n      if (shouldUseSupabase()) {\n        const updatedPost = await PostsService.updatePost(postId, updates);\n        // Also update localStorage\n        this.updatePostInLocalStorage(postId, updatedPost);\n        return updatedPost;\n      } else {\n        return this.updatePostInLocalStorage(postId, updates);\n      }\n    } catch (error) {\n      console.warn('Supabase failed, falling back to localStorage:', error);\n      return this.updatePostInLocalStorage(postId, updates);\n    }\n  }\n\n  // Seed initial data\n  static async seedInitialData(profiles: Profile[]): Promise<void> {\n    try {\n      if (shouldUseSupabase()) {\n        await PostsService.seedInitialData(profiles);\n        // Also save to localStorage as backup\n        this.saveProfilesToLocalStorage(profiles);\n      } else {\n        this.saveProfilesToLocalStorage(profiles);\n      }\n    } catch (error) {\n      console.warn('Supabase failed, falling back to localStorage:', error);\n      this.saveProfilesToLocalStorage(profiles);\n    }\n  }\n\n  // LocalStorage fallback methods\n  private static getPostsFromLocalStorage(): Profile[] {\n    try {\n      const stored = localStorage.getItem('newspaperDatingProfiles');\n      if (stored) {\n        const parsed = JSON.parse(stored);\n        return parsed.map((profile: any) => ({\n          ...profile,\n          likes: profile.likes || 0, // Ensure likes field exists\n          createdAt: new Date(profile.createdAt),\n          comments: profile.comments.map((comment: any) => ({\n            ...comment,\n            createdAt: new Date(comment.createdAt)\n          }))\n        }));\n      }\n    } catch (error) {\n      console.error('Error loading from localStorage:', error);\n    }\n    return [];\n  }\n\n  private static saveProfilesToLocalStorage(profiles: Profile[]): void {\n    try {\n      localStorage.setItem('newspaperDatingProfiles', JSON.stringify(profiles));\n      localStorage.setItem('newspaperDatingVersion', '2.4'); // Updated version for likes field\n    } catch (error) {\n      console.error('Error saving to localStorage:', error);\n    }\n  }\n\n\n\n\n\n  private static deletePostFromLocalStorage(postId: string): void {\n    try {\n      const profiles = this.getPostsFromLocalStorage();\n      const filteredProfiles = profiles.filter(p => p.id !== postId);\n      this.saveProfilesToLocalStorage(filteredProfiles);\n    } catch (error) {\n      console.error('Error deleting post from localStorage:', error);\n    }\n  }\n\n  private static updatePostInLocalStorage(postId: string, updates: Partial<Profile>): Profile {\n    const profiles = this.getPostsFromLocalStorage();\n    const profileIndex = profiles.findIndex(p => p.id === postId);\n    if (profileIndex >= 0) {\n      profiles[profileIndex] = { ...profiles[profileIndex], ...updates };\n      this.saveProfilesToLocalStorage(profiles);\n      return profiles[profileIndex];\n    }\n    throw new Error('Post not found');\n  }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}